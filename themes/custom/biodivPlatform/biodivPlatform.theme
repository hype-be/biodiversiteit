<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */
use Drupal\node\Entity\Node;
use Symfony\Component\HttpFoundation\RedirectResponse;

use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function biodivPlatform_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
    $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
        'bg-primary' => t('Primary'),
        'bg-secondary' => t('Secondary'),
        'bg-light' => t('Light'),
        'bg-dark' => t('Dark'),
        'bg-white' => t('White'),
        'bg-transparent' => t('Transparent'),
    );
    $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
        'bg-primary' => t('Primary'),
        'bg-secondary' => t('Secondary'),
        'bg-light' => t('Light'),
        'bg-dark' => t('Dark'),
        'bg-white' => t('White'),
        'bg-transparent' => t('Transparent'),
    );
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function biodivPlatform_theme_suggestions_page_alter(array &$suggestions, array $variables)
{
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
        $content_type = $node->bundle();
        $suggestions[] = 'page__' . $content_type;
    }

    $route_name = \Drupal::routeMatch()->getRouteName();
    switch ($route_name) {
        case 'system.401':
            // Unauthorized Access.
            $error = 401;
            break;

        case 'system.403':
            // Access Denied.
            $error = 403;
            break;

        case 'system.404':
            // Page Not Found.
            $error = 404;
            break;
    }
    if (isset($error)) {
        $suggestions[] = 'page__' . $error;
    }
}

function biodivPlatform_preprocess_page(&$variables) {
    $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
    $user_id = Drupal::currentUser()->id();

    if (!$user->user_picture->isEmpty()) {
        $displayImg = file_create_url($user->user_picture->entity->getFileUri());
    }else{
        $displayImg = '';
    }

    $uri = $user->user_picture->entity->uri->value;
    $img_url = ImageStyle::load('56x56')->buildUrl($uri);

    $first_name = $user->field_first_name->value;
    $last_name = $user->field_last_name->value;
    $teaching_level = $user->field_teaching_level->value;
    $teaching_level_name = '';

    switch ($teaching_level) {
        case 0:
            $teaching_level_name = 'Basisonderwijs';
            break;
        case 1:
            $teaching_level_name = 'Middelbaar onderwijs';
            break;
        case 2:
            $teaching_level_name = 'Bijzonder onderwijs';
        case 3:
            $teaching_level_name = 'Andere (animator, sociaal werker,â€¦)';
            break;
        default:
            $teaching_level_name = 'Basisonderwijs';
    }

    /*Drupal::logger('wimdebug2')->debug(print_r($city, true));*/
    $variables['userId'] = $user_id;
    $variables['picture'] = $img_url;
    $variables['firstName'] = $first_name;
    $variables['lastName'] = $last_name;
    $variables['teachingLevel'] = $teaching_level_name;
}
